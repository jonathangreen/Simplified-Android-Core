name: Android CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Android NDK
      id: ndk-cache
      uses: actions/cache@v2
      with:
        path: /usr/local/lib/android/sdk/ndk
        key: ndk-cache-20.0.5594570
    - name: Install NDK
      if: steps.ndk-cache.outputs.cache-hit != 'true'
      run: /usr/local/lib/android/sdk/tools/bin/sdkmanager --install "ndk;20.0.5594570"
    - name: Cache Gradle
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
          !~/.gradle/caches/modules-2/modules-2.lock
          !~/.gradle/caches/*/plugin-resolution
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build
      run: > 
        ./gradlew 
        clean ktlint test assembleDebug 
        -Dorg.gradle.internal.publish.checksums.insecure=true  
    - name: Publish vanilla
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: vanilla-debug
        path: 
          simplified-app-vanilla/build/outputs/apk/vanilla/debug/*-vanilla-debug.apk
    - name: Publish vanillaWithProfiles
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: vanillaWithProfiles-debug
        path: 
          simplified-app-vanilla/build/outputs/apk/vanillaWithProfiles/debug/*-vanillaWithProfiles-debug.apk

  browserstack:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download vanilla apk
        uses: actions/download-artifact@v2
        with:
          name: vanilla-debug

# Use the downloaded artifacts to run tests in browserstack, etc
#
#       - name: Upload to browserstack
#         run: |
#           APP_UPLOAD_RESPONSE=$(curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESSKEY }}" -X POST https://api-cloud.browserstack.com/app-automate/upload -F file=@*-vanilla-debug.apk)
#           APP_ID=$(echo $APP_UPLOAD_RESPONSE | jq -r ".app_url")
#           if [ $APP_ID != null ]; then
#             echo "Apk uploaded to BrowserStack with app id : ",$APP_ID;
#             echo "export BROWSERSTACK_APP_ID=$APP_ID" >> $BASH_ENV;
#             source $BASH_ENV;
#             echo "Setting value of BROWSERSTACK_APP_ID in environment variables to  ",$APP_ID;
#           else
#             UPLOAD_ERROR_MESSAGE=$(echo $APP_UPLOAD_RESPONSE | jq -r ".error")
#             echo "App upload failed, reason : ",$UPLOAD_ERROR_MESSAGE
#             exit 1;
#           fi
